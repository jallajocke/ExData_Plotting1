digest(x, algo = "sha1", serialize = FALSE)
}
submitSolution <- function(email, ch.resp, sid, output, signature, submit.url,
src = "", http.version = NULL) {
output <- as.character(base64(output))
src <- as.character(base64(src))
params <- list(assignment_part_sid = sid,
email_address = email,
submission = output,
submission_aux = src,
challenge_response = ch.resp,
state = signature)
params <- lapply(params, URLencode)
result <- postForm(submit.url, .params = params)
s <- strsplit(result, "\\r\\n")[[1]]
tail(s, 1)
}
get_courseid <- function() {
pretty_out("The first item I need is your Course ID. For example, if the",
"homepage for your Coursera course was",
"'https://class.coursera.org/rprog-001',",
"then your course ID would be 'rprog-001' (without the quotes).", skip_after=TRUE)
repeat {
courseid <- readline("Course ID: ")
## Remove quotes if there are any
courseid <- gsub("\'|\"", "", courseid)
## Set up test cases
is_url <- str_detect(courseid, "www[.]|http:|https:")
is_numbers <- str_detect(courseid, "^[0-9]+$")
is_example <- str_detect(courseid, fixed("rprog-001"))
## Check if courseid is none of the bad things
if(!any(is_url, is_numbers, is_example)){
break
## courseid is one of the bad things
} else {
## Check if courseid is a url
if(is_url) {
pretty_out("It looks like you entered a web address, which is not what I'm",
"looking for.")
}
## Check if courseid is all numbers
if(is_numbers) {
pretty_out("It looks like you entered a numeric ID, which is not what I'm",
"looking for.")
}
## Check if the user stole the example courseid
if(is_example) {
pretty_out("It looks like you entered the Course ID that I used as an",
"example, which is not what I'm looking for.")
}
}
pretty_out("Instead, I need your Course ID, which is the last",
"part of the web address for your Coursera course.",
"For example, if the homepage for your Coursera course was",
"'https://class.coursera.org/rprog-001',",
"then your course ID would be 'rprog-001' (without the quotes).",
skip_after=TRUE)
}
courseid
}
pretty_out <- function(..., skip_before=TRUE, skip_after=FALSE) {
wrapped <- strwrap(str_c(..., sep = " "),
width = getOption("width") - 2)
mes <- str_c("| ", wrapped, collapse = "\n")
if(skip_before) mes <- paste0("\n", mes)
if(skip_after) mes <- paste0(mes, "\n")
message(mes)
}
checkPkgs <- function() {
pkg.inst <- installed.packages()
pkgs <- c("RCurl", "digest", "stringr")
have.pkg <- pkgs %in% rownames(pkg.inst)
if(any(!have.pkg)) {
message("\nSome packages need to be installed.\n")
r <- readline("Install necessary packages [y/n]? ")
if(tolower(r) == "y") {
need <- pkgs[!have.pkg]
message("\nInstalling packages ",
paste(need, collapse = ", "))
install.packages(need)
}
}
}
loginPrompt <- function() {
courseid <- get_courseid()
email <- readline("Submission login (email): ")
passwd <- readline("Submission  password: ")
r <- list(courseid = courseid, email = email, passwd = passwd)
assign(".CourseraLogin", r, globalenv())
invisible(r)
}
function(manual = FALSE, resetLogin = FALSE) {
checkPkgs()
suppressPackageStartupMessages(library(RCurl))
library(digest)
library(stringr)
readline("\nPress Enter to continue...")
if(!manual) {
confirmed <- FALSE
need2fix <- FALSE
while(!confirmed) {
if(exists(".CourseraLogin") && !resetLogin && !need2fix)
cred <- get(".CourseraLogin")
else
cred <- loginPrompt()
if(!is.list(cred) || !(names(cred) %in% c("email", "passwd", "courseid")))
stop("problem with login/password")
courseid <- cred$courseid
email <- cred$email
password <- cred$passwd
pretty_out("Is the following information correct?",
skip_after=TRUE)
message("Course ID: ", courseid,
"\nSubmission login (email): ", email,
"\nSubmission password: ", password)
yn <- c("Yes, go ahead!",
"No, I need to change something.")
confirmed <- identical(select.list(yn, graphics=FALSE), yn[1])
if(!confirmed) need2fix <- TRUE
}
## Set urls based on confirmed courseid
challenge.url <- paste("http://class.coursera.org", courseid,
"assignment/challenge", sep = "/")
submit.url <- paste("http://class.coursera.org", courseid,
"assignment/submit", sep = "/")
}
## Prompt Submission Part
sid <- partPrompt()
## Get output
output <- getOutput(sid)
if(!manual) {
## Get challenge
ch <- try(getChallenge(email, challenge.url), silent=TRUE)
## Check if url is valid, i.e. challenge received
ch_ok <- !is(ch, "try-error") && exists("ch.key", ch) && !is.na(ch$ch.key)
if(!ch_ok) {
stop("Either the course ID you entered is not valid or your course site ",
"is unreachable at this time. If you'd like to submit manually, you ",
"can run submit(manual=TRUE).")
}
## Attempt submission with challenge
ch.resp <- challengeResponse(password, ch$ch.key)
results <- submitSolution(email, ch.resp, sid, output, ch$state,
submit.url = submit.url)
if(!length(results))
results <- "Incorrect!"
cat("Result: ", results, "\n")
}
else {
outfile <- paste(sid, "output.txt", sep = "-")
writeLines(as.character(output), outfile)
cat(sprintf("Please upload the file '%s' to Coursera\n",
outfile))
}
invisible()
}
})
submit()
Edu <- read.csv(eduFile)
gdpColNames = c("Country","Ranking","X1","Economy","US Dollars","X2","X3","X4","X5","X6")
gdpColClass = c("character","integer","NULL","character","character","NULL","NULL","NULL","NULL","NULL")
GDP <- read.csv(gdpFile, sep = ",", header = FALSE, skip = 5, nrows=228, col.names = gdpColNames, blank.lines.skip = TRUE)
gdpFile <- ".\\GDP.csv"
eduFile <- ".\\Edu.csv"
if(!file.exists(gdpFile) | !file.exists(eduFile)){
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileURL, destfile = gdpFile)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileURL, destfile = eduFile)
dateDownloaded <-date()
}
Edu <- read.csv(eduFile)
gdpColNames = c("Country","Ranking","X1","Economy","US Dollars","X2","X3","X4","X5","X6")
gdpColClass = c("character","integer","NULL","character","character","NULL","NULL","NULL","NULL","NULL")
GDP <- read.csv(gdpFile, sep = ",", header = FALSE, skip = 5, nrows=228, col.names = gdpColNames, blank.lines.skip = TRUE)
countryMatch <- match(Edu$CountryCode, GDP$Country)
sum(!is.na(countryMatch))
countryMatch <- match(Edu$CountryCode, GDP[which(GDP$Ranking != ""),]$Country)
sum(!is.na(countryMatch))
order(GDP$Ranking, decreasing = FALSE)
head(GDP)
GDP[order(GDP$Ranking, decreasing = FALSE)]
GDP[order(GDP$Ranking, decreasing = FALSE),]
GDP[order(GDP$Ranking, decreasing = TRUE),]
head(GDP)
GDP[order(GDP$Ranking, decreasing = TRUE),13]
head(GDP[order(GDP$Ranking, decreasing = TRUE),],n=13)
sum(!is.na(countryMatch))
head(GDP[order(GDP$Ranking, decreasing = TRUE),],n=13)
m <- matrix()
m[1,1] = 2
m[1,2] = 3
m[2,2] = 3
m <- matrix(2)
m[2,2] = 3
help(matrix)
m <- matrix(nrow = 2, ncol = 2)
m[1,1] = 2
m[1,2] = 3
m[2,2] = 4
m[2,1] = 1
m
n <- solve(m)
n %*% m
## Functions for creating and getting the inverse of a matrix, caching
## the value of inverse once calculated, which reduces computations for
## every retrieval of the inverse.
## Creates a matrix from 'x' with a cached inverse. Returns a list
## of get/set functions for the matrix and its inverse.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inverse
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## Returns a matrix that is the inverse of 'x', assuming it has one.
## Takes advantage of the cached ability of x.
cacheSolve <- function(x, ...) {
inv <- x$getInverse()
if(is.NULL(inv)) {
m <- x$get()
inv <- solve(m)
x$setInverse(inv)
}
inv
}
makeCacheMatrix(m)
s <- makeCacheMatrix(m)
s$get()
s$getInverse()
## Functions for creating and getting the inverse of a matrix, caching
## the value of inverse once calculated, which reduces computations for
## every retrieval of the inverse.
## Creates a matrix from 'x' with a cached inverse. Returns a list
## of get/set functions for the matrix and its inverse.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## Returns a matrix that is the inverse of 'x', assuming it has one.
## Takes advantage of the cached ability of x.
cacheSolve <- function(x, ...) {
inv <- x$getInverse()
if(is.NULL(inv)) {
m <- x$get()
inv <- solve(m)
x$setInverse(inv)
}
inv
}
s <- makeCacheMatrix(m)
s$getInverse()
cacheSolve(s)
cacheSolve <- function(x, ...) {
inv <- x$getInverse()
if(is.null(inv)) {
m <- x$get()
inv <- solve(m)
x$setInverse(inv)
}
inv
}
t <- cacheSolve(s)
t
t %*% s$get
s$get() %*% t
cacheSolve <- function(x, ...) {
inv <- x$getInverse()
if(is.null(inv)) {
message("ola!")
m <- x$get()
inv <- solve(m)
x$setInverse(inv)
}
inv
}
t <- cacheSolve(s)
v <- makeCacheMatrix(t)
g <- cacheSolve(v)
r <- cacheSolve(v)
m
n <- makeCacheMatrix(m)
n$get()
n$getInverse()
h <- cacheSolve(n)
h
h %*% n$get()
n$set(h)
n$get()
swirl()
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(cran, mean(package))
summarize(by_package, mean(package))
summarize(by_package, mean(size))
?n
submit()
?n_distinct
submit()
submit()
pack_sum
quantile(pack_sum$count,  probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_uniqu, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTrue(6 > 4)
isTRUE(6 > 4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram("Good", "morning")
submit()
mad_libs(place = "here", adjective = "fast", noun = "dog")
submit()
"I" %p% "love" %p% "R!"
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply/flags, class)
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
swirl()
x <- rnorm(100)
hist(x)
y <- rnorm(100)
plot(x, y)
par(mar = c(2,2,2,2))
plot(x,y)
plot(x, y, xlab = "Weight", ylab= "Height", main = "Scatterplot", pch = 20)
par(mar = c(4,4,2,2))
plot(x, y, xlab = "Weight", ylab= "Height", main = "Scatterplot", pch = 20)
legend("topright", legend = "Data", pch = 20)
fit <- lm(y ~ x)
abline(fit, lwd = 3, color = "red")
abline(fit, lwd = 3, col = "red")
z <- rpois(100, 2)
par(mfrow = c(2,1))
plot(x,y, pch = 20)
plot(c,y, pch = 19)
plot(x,y, pch = 19)
plot(x,y, pch = 20)
x <- rnorm(100)
y <- x + rnorm(100)
g <- gl(2, 50)
g <- gl(2, 50, labels = c("Male", "Female"))
help(gl)
str(g)
plot(x,y type = "n") # displays everything but the data
plot(x,y type = "n") # displays everything but the data
plot(x,y, type = "n") # displays everything but the data
points(x[g == "Male"], y[g == "Male"], col = "green")
points(x[g == "Female"], y[g == "Female"], col = "red", pch = 2)
help("read.table")
housePC <- read.table("household_power_consumption.txt")
pwd
pwd()
ls()
getwd()
setwd("C:\\Users\\jolindqv\\OneDrive\\Skola\\Coursera\\John Hopkins\\3 Clean Data\\Project\\CleanData\\")
housePC <- read.table("household_power_consumption.txt")
setwd("C:\\Users\\jolindqv\\OneDrive\\Skola\\Coursera\\John Hopkins\\4 Exploratory Data Analysis\\Project1\\")
dir()
setwd("C:\\Users\\jolindqv\\OneDrive\\Skola\\Coursera\\John Hopkins\\4 Exploratory Data Analysis\\Project1\\ExData_Plotting1")
housePC <- read.table("household_power_consumption.txt")
ef
fe
;
:
housePC$colClasses
housePC.colClasses
apply(housePC,2,class)
housePC <- read.table("household_power_consumption.txt", sep ";")
housePC <- read.table("household_power_consumption.txt", sep = ";")
apply(housePC,2,class)
head(housePC)
colClasses = c("character", "character", "double", "double", "double", "double", "double", "double", "double")
colClass = c("character", "character", "double", "double", "double", "double", "double", "double", "double")
colClasses = c("character", "character", "double", "double", "double", "double", "double", "double", "double")
housePC <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", colClasses = colClasses)
head(housePC, 100)
colClasses = c("character", "character", "character", "character", "character", "character", "character", "character", "character")
housePC <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", colClasses = colClasses)
housePC$Date.asDate()
asDate(housePC$Date)
Date.asDate(housePC$Date)
as.Date(housePC$Date)
colClasses = c("date", "character", "character", "character", "character", "character", "character", "character", "character")
housePC <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", colClasses = colClasses)
housePC <- as.Date(housePC$Date)
housePC$Date <- as.Date(housePC$Date)
head(housePC, 100)
head(housePC)
housePC <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", colClasses = colClasses)
housePC[which(housePC$Date == "01/02/2007" || housePC$Date == "02/02/2007")]
colClasses = c("character", "character", "character", "character", "character", "character", "character", "character", "character")
housePC <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", colClasses = colClasses)
housePC[which(housePC$Date == "01/02/2007" || housePC$Date == "02/02/2007")]
head(housePC)
housePC[which(housePC$Date == "01/02/2007" || housePC$Date == "02/02/2007"), ]
housePC[which(housePC$Date == "1/2/2007" || housePC$Date == "2/2/2007"), ]
housePC[which(housePC$Date == "16/12/2007" || housePC$Date == "17/12/2007"), ]
test <- housePC[which(housePC$Date == "16/12/2007" || housePC$Date == "17/12/2007"), ]
head(test)
head(housePC)
test <- housePC[which(housePC$Date == "16/12/2007"), ]
head(test)
test <- housePC[which(housePC$Date == "01/02/2007"), ]
head(test)
test <- housePC[which(housePC$Date == "1/2/2007"), ]
head(test)
test <- housePC[which(housePC$Date == "1/2/2007" || housePC$Date == "2/2/2007"), ]
head(test)
test <- housePC[which(housePC$Date == "1/2/2007" || housePC$Date == "1/2/2007"), ]
head(test)
test <- housePC[which(housePC$Date in c("1/2/2007", "1/2/2007")), ]
test <- housePC[which(housePC$Date == "1/2/2007" | housePC$Date == "1/2/2007")), ]
test <- housePC[which(housePC$Date == "1/2/2007" | housePC$Date == "1/2/2007"), ]
head(test)
head(housePC2)
housePC2 <- housePC[which(housePC$Date == "1/2/2007" | housePC$Date == "1/2/2007"), ]
head(housePC2)
housePC2$Date <- as.Date(housePC2$Date)
housePC2$Time <- strptime(housePC2$Time)
help("strptime")
housePC2$Time <- strptime(housePC2$Time, format = "%R", tz = "GMT")
head(housePC2)
